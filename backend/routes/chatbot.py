import requests
import os
import time
from flask import Blueprint, request, jsonify
from flask_jwt_extended import jwt_required
from dotenv import load_dotenv

# ‚úÖ Charger les variables d'environnement depuis `.env`
load_dotenv()
HUGGINGFACE_API_KEY = os.getenv("HUGGINGFACE_API_KEY")

# ‚úÖ V√©rifier que la cl√© API est bien charg√©e
if not HUGGINGFACE_API_KEY:
    print("‚ùå Cl√© API Hugging Face non trouv√©e ! V√©rifiez votre .env.")
else:
    print(f"‚úÖ Cl√© API Hugging Face trouv√©e : {HUGGINGFACE_API_KEY[:10]}********")

# ‚úÖ D√©finition du mod√®le Hugging Face (Zephyr-7B-Alpha)
MODEL_NAME = "HuggingFaceH4/zephyr-7b-alpha"
API_URL = f"https://api-inference.huggingface.co/models/{MODEL_NAME}"

HEADERS = {
    "Authorization": f"Bearer {HUGGINGFACE_API_KEY}",
    "Content-Type": "application/json"
}

# ‚úÖ V√©rifier si le mod√®le est charg√©
def wait_for_model():
    """
    V√©rifie si le mod√®le est pr√™t avant de d√©marrer Flask.
    Attend jusqu'√† ce que le mod√®le soit charg√©.
    """
    while True:
        response = requests.get(API_URL, headers=HEADERS)

        if response.status_code == 200:
            print(f"‚úÖ Mod√®le '{MODEL_NAME}' charg√©, pr√™t √† l'utilisation !")
            return True
        else:
            error_details = response.json()
            print(f"‚è≥ Mod√®le en cours de chargement... V√©rification dans 10 secondes.")
            time.sleep(10)

# ‚úÖ Attendre que le mod√®le soit charg√© avant de d√©marrer Flask
wait_for_model()

# ‚úÖ Cr√©er un Blueprint Flask pour le chatbot
chatbot = Blueprint("chatbot", __name__)

# ‚úÖ V√©rifier si le mod√®le est pr√™t via API Flask
@chatbot.route("/check_model", methods=["GET"])
def check_model():
    """
    V√©rifie si le mod√®le Zephyr-7B-Alpha est charg√© sur Hugging Face.
    """
    try:
        response = requests.get(API_URL, headers=HEADERS)

        if response.status_code == 200:
            return jsonify({"status": "success", "message": f"Mod√®le '{MODEL_NAME}' bien charg√© !"}), 200
        else:
            return jsonify({"status": "error", "message": "Le mod√®le est en cours de chargement ou indisponible.", "details": response.json()}), response.status_code

    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500


# ‚úÖ Fonction pour envoyer une question √† Zephyr-7B-Alpha
def ask_medical_question(question):
    """
    Envoie une question au mod√®le Zephyr-7B-Alpha via l'API Hugging Face et retourne la r√©ponse.
    """
    payload = {
        "inputs": question,
        "parameters": {
            "max_length": 500,  # üîπ Augmente la longueur des r√©ponses
            "temperature": 0.7,  # üîπ Rend la r√©ponse plus naturelle
            "top_p": 0.9,  # üîπ Contr√¥le la diversit√© des r√©ponses
            "do_sample": True  # üîπ Active la variabilit√© des r√©ponses
        }
    }

    try:
        response = requests.post(API_URL, headers=HEADERS, json=payload)

        if response.status_code != 200:
            error_details = response.json()
            print(f"‚ùå Erreur API Hugging Face : {error_details}")
            return f"‚ùå Erreur API Hugging Face : {error_details}"

        return response.json()[0]["generated_text"].strip()  # üîπ Nettoyer la r√©ponse

    except Exception as e:
        return f"‚ùå Erreur API : {str(e)}"


# ‚úÖ Route Flask pour le chatbot
@chatbot.route("/chat", methods=["POST"])
@jwt_required(optional=True)
def chat():
    print(f"üì© Donn√©es brutes re√ßues : {request.data}")
    print(f"üì© Type Content-Type : {request.content_type}")

    try:
        # üîπ V√©rifier si le JSON re√ßu est valide
        data = request.get_json(silent=True)
        if not data or "message" not in data:
            return jsonify({"error": "JSON invalide. Assurez-vous d'envoyer un champ 'message'."}), 400

        user_input = data["message"]
        print(f"üì® Question pos√©e : {user_input}")

        # üîπ Appel au mod√®le Hugging Face pour obtenir une r√©ponse
        chatbot_response = ask_medical_question(user_input)

        print(f"üì© R√©ponse du chatbot : {chatbot_response}")
        return jsonify({"response": chatbot_response})

    except Exception as e:
        print(f"‚ùå Erreur API : {str(e)}")
        return jsonify({"error": str(e)}), 500
