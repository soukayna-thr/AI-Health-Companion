"""from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate  
from flask_jwt_extended import JWTManager

from config.config import Config
from models import db  
from models.models import User  
from dotenv import load_dotenv
import os
import openai
from routes.auth import auth
from routes.prediction import prediction
from routes.upload import upload
from routes.recommendation import recommendation
from routes.chatbot import chatbot
from routes.dashboard import dashboard


app = Flask(__name__)
app.config.from_object(Config)
load_dotenv() 
from dotenv import load_dotenv
import os

# Charger les variables d'environnement
dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
print("üìÇ Chargement du fichier .env depuis :", dotenv_path)

load_dotenv(dotenv_path)  # ‚úÖ Force le chargement du fichier .env

openai_api_key = os.getenv("OPENAI_API_KEY")

if not openai_api_key:
    print("‚ùå Cl√© API non trouv√©e ! V√©rifiez si .env existe et est correct.")
else:
    print("‚úÖ Cl√© API trouv√©e :", openai_api_key[:10] + "********")

openai.api_key = os.getenv("OPENAI_API_KEY")
print("‚úÖ Cl√© API OpenAI charg√©e :", openai.api_key[:10] + "********" if openai.api_key else "‚ùå Cl√© API non trouv√©e !")

# üîπ Initialisation UNIQUE de SQLAlchemy et JWT
db.init_app(app)
migrate = Migrate(app, db)  
app.config["JWT_SECRET_KEY"] = "super-secret-key"  
jwt = JWTManager(app)

# üîπ Enregistrement des routes
app.register_blueprint(auth, url_prefix="/auth")
app.register_blueprint(prediction, url_prefix="")
app.register_blueprint(upload, url_prefix="/upload")
app.register_blueprint(recommendation, url_prefix="/recommend")
app.register_blueprint(chatbot, url_prefix="/chatbot")
app.register_blueprint(dashboard, url_prefix="/dashboard")


if __name__ == "__main__":
    with app.app_context():  
        db.create_all()  # ‚úÖ Seulement si Flask-Migrate n'est pas utilis√©
    app.run(debug=True, port=5000)
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate  
from flask_jwt_extended import JWTManager
from dotenv import load_dotenv
import os
import openai

from config.config import Config
from models import db  
from models.models import User  
from routes.auth import auth
from routes.prediction import prediction
from routes.upload import upload
from routes.recommendation import recommendation
from routes.chatbot import chatbot
from routes.dashboard import dashboard

# ‚úÖ Charger les variables d‚Äôenvironnement depuis `.env`
dotenv_path = os.path.join(os.path.dirname(__file__), ".env")
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)
    print(f"üìÇ Chargement du fichier .env depuis : {dotenv_path}")
else:
    print("‚ö†Ô∏è Alerte : Aucun fichier .env trouv√© ! V√©rifiez son emplacement.")

# ‚úÖ Charger la cl√© API OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

if not openai.api_key:
    print("‚ùå Cl√© API OpenAI non trouv√©e ! V√©rifiez votre variable d'environnement.")
else:
    print(f"‚úÖ Cl√© API OpenAI trouv√©e : {openai.api_key[:10]}********")

# üîπ Initialisation de l‚Äôapplication Flask
app = Flask(__name__)
app.config.from_object(Config)

# üîπ Initialisation UNIQUE de SQLAlchemy et JWT
db.init_app(app)
migrate = Migrate(app, db)  
app.config["JWT_SECRET_KEY"] = "super-secret-key"  
jwt = JWTManager(app)

# üîπ Enregistrement des routes
app.register_blueprint(auth, url_prefix="/auth")
app.register_blueprint(prediction, url_prefix="")
app.register_blueprint(upload, url_prefix="/upload")
app.register_blueprint(recommendation, url_prefix="/recommend")
app.register_blueprint(chatbot, url_prefix="/chatbot")
app.register_blueprint(dashboard, url_prefix="/dashboard")

# üîπ D√©marrer l'application Flask
if __name__ == "__main__":
    with app.app_context():  
        db.create_all()  # ‚úÖ Seulement si Flask-Migrate n'est pas utilis√©
    app.run(debug=True, port=5000)"""
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate  
from flask_jwt_extended import JWTManager
from dotenv import load_dotenv
import os
from config.config import Config
from models import db  
from models.models import User  
from routes.auth import auth
from routes.prediction import prediction
from routes.upload import upload
from routes.recommendation import recommendation
from routes.chatbot import chatbot
from routes.dashboard import dashboard

# ‚úÖ Charger les variables d‚Äôenvironnement depuis `.env`
dotenv_path = os.path.join(os.path.dirname(__file__), ".env")
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)
    print(f"üìÇ Chargement du fichier .env depuis : {dotenv_path}")
else:
    print("‚ö†Ô∏è Alerte : Aucun fichier .env trouv√© ! V√©rifiez son emplacement.")

# ‚úÖ Charger la cl√© API Hugging Face
huggingface_api_key = os.getenv("HUGGINGFACE_API_KEY")

if not huggingface_api_key:
    print("‚ùå Cl√© API Hugging Face non trouv√©e ! V√©rifiez votre variable d'environnement.")
else:
    print(f"‚úÖ Cl√© API Hugging Face trouv√©e : {huggingface_api_key[:10]}********")

# üîπ Initialisation de l‚Äôapplication Flask
app = Flask(__name__)
app.config.from_object(Config)

# üîπ Initialisation UNIQUE de SQLAlchemy et JWT
db.init_app(app)
migrate = Migrate(app, db)  
app.config["JWT_SECRET_KEY"] = "super-secret-key"  
jwt = JWTManager(app)

# üîπ Enregistrement des routes
app.register_blueprint(auth, url_prefix="/auth")
app.register_blueprint(prediction, url_prefix="")
app.register_blueprint(upload, url_prefix="/upload")
app.register_blueprint(recommendation, url_prefix="/recommend")
app.register_blueprint(chatbot, url_prefix="/chatbot")  # ‚úÖ Chatbot mis √† jour pour Hugging Face
app.register_blueprint(dashboard, url_prefix="/dashboard")

# üîπ D√©marrer l'application Flask
if __name__ == "__main__":
    with app.app_context():  
        db.create_all()  # ‚úÖ Seulement si Flask-Migrate n'est pas utilis√©
    app.run(debug=True, port=5000)
